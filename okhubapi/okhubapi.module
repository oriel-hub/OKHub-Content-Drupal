<?php
// $Id$

/**
 * @file
 *  OKHUB API Module.
 *
 * This module uses the OKHUB Knowldege Services API (http://developer.okhub.org/hub-api-documentation/api-explorer) in order
 * to search, display and import data and metadata contained in the OKHUB
 * datasets, which are maintained by the OKHUB.
 */

/* --------------------- Hooks implementations -------------------- */

/**
 * Include files that implement the request and objects classes
 */
require_once('okhubapi.default.inc');
require_once(OKHUB_API_LIBRARY_PATH . 'okhubwrapper.default.inc');

/**
 * Implements hook_flush_caches().
 */
function okhubapi_flush_caches() {
  return array(OKHUB_API_CACHE_REQUESTS);
}

/**
 * Implements hook_enable().
 */
function okhubapi_enable() {
    drupal_flush_all_caches();
    drupal_set_message(t('To use the OKHUB API module, first go to the <a href="@url">OKHUB API Administration</a> to set general parameters, including your OKHUB API key.', array('@url' => url('admin/config/services/okhubapi'))));
}

/**
 * Implements hook_disable().
 */
function okhubapi_disable() {
    drupal_flush_all_caches();
}

/**
 * Implements of hook_menu().
 */
function okhubapi_menu() {
  $items = array();

  $items['admin/config/services/okhubapi'] = array(
    'title' => t('OKHUB API Module settings'),
    'description' => t('Global settings for the OKHUB API module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('okhubapi_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer okhubapi'),
    'file' => 'okhubapi.admin.inc',
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function okhubapi_permission() {
  return array(
    'administer okhubapi' => array(
      'title' => t('Administer the OKHUB API module'), 
      'description' => t('Perform administration tasks for the OKHUB API module.'),
    ),
  );
}
 
/**
 * Implements hook_help().
 */
function okhubapi_help($path, $arg) {
  if ($path == 'admin/help#okhubapi') {
    return t('Uses the OKHUB API to provide access to Eldis and Bridge content. API documentation: ') . OKHUB_API_DOCUMENTATION_URL;
  }
}

/**
 * Function used to retrieve OKHUB items using get_all.
 */
function okhubapi_get_all($type, $set, $format) {
  $okhubwrapper = new OkhubApiWrapper;
  $api_key = variable_get('okhubapi_api_key', '');
  $priorities = _okhubapi_get_priorities_arr();
  $response = $okhubwrapper->getAll($type, $set, $api_key, $format, $priorities);
  return $response;
}

/**
 * Function used to retrieve OKHUB items using search, with parameters.
 */
function okhubapi_search($type, $set, $format, $params, $extra_fields = array(), $num_requested = 0, $age_results = 0, $start_offset = 0) {
  $okhubwrapper = new OkhubApiWrapper;
  $api_key = variable_get('okhubapi_api_key', '');
  $priorities = _okhubapi_get_priorities_arr();
  $response = $okhubwrapper->search($type, $set, $api_key, $format, $num_requested, $age_results, $start_offset, $params, $extra_fields, $priorities);
  return $response;
}

/**
 * Function used to retrieve OKHUB items using count, with parameters.
 */
function okhubapi_count($type, $set, $count_category, $age_results = 0, $params = array()) {
  $okhubwrapper = new OkhubApiWrapper;
  $api_key = variable_get('okhubapi_api_key', '');
  $priorities = _okhubapi_get_priorities_arr();
  $response = $okhubwrapper->count($type, $set, $api_key, $count_category, $age_results, $params, $priorities);
  return $response;	
}

/* ---------------- Examples of calls to the OKHUB API --------------- */

/**
 * Implements hook_block_info().
 */
function okhubapi_block_info() {
  $blocks = array();
  $sources_options = _okhubapi_get_sources_options();
  foreach($sources_options as $source_code => $source_name){
	  $blocks['okhubapi_new_' . $source_code . '_docs'] = array(
	    'info' => t($source_name . ' documents'),
	    'cache' => DRUPAL_NO_CACHE,
	  );  	
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function okhubapi_block_view($block_name = '') {
  $block = array();
  $content = '';

  $block_name_arr = explode('_', $block_name);
  if(count($block_name_arr) > 3){
  	if($block_name_arr[0] == 'okhubapi' && $block_name_arr[1] == 'new' && $block_name_arr[3] == 'docs'){
  		$sources_options = _okhubapi_get_sources_options();
  		$source_id = $block_name_arr[2];
  		$params = array('source' => $source_id);
	    $response = okhubapi_search('documents', OKHUB_API_DEFAULT_DATASET, 'full', $params, $extra_fields = array(), $num_requested = 5);
	    $items = $response->getArrayLinks($source_id);
	    if (is_array($items)) {
	      $theme_args = array('items' => $items, 'type' => 'ol');
	      $content = theme('item_list', $theme_args);
	    }
	    else  {
	      $content = theme('help', 'Error when recovering block content.');
	    }
	    $source_name = $sources_options[$source_id];
	    $block['subject'] = t($source_name . ' recent documents');
  	}
  }
 
  $block['content'] = $content;
  return $block;
}

/*
 * Function to return the selected datasources as array
 */
function _okhubapi_get_selected_datasources_array($datasource_var_name = 'okhubimport_default_datasources'){
	$datasources_arr = array();
    if ($datasources = variable_get($datasource_var_name)) {
    	if($datasources != 'all'){
	    	foreach($datasources as $datasource => $value){
	    		if($value){
	    			$datasources_arr[] = $datasource;
	    		}
	    	}
    	}
    }
    return $datasources_arr;
}

/*
 * Function to return the selected themes as array
 */
function _okhubapi_get_selected_themes_array(){
	$themes_arr = array();
    if ($themes_arr = variable_get('okhubimport_default_themes')) {
    	/*
    	 * API works on theme names, rather than IDs so need to look them up 
    	 * (I wanted to use IDs -- if the API modified to use IDs don't need to do the next line)
    	 */
    	//$themes_arr = _okhubapi_get_theme_names_array_from_ids($themes_arr);
    	foreach($themes_arr as $theme => $value){
    		if($value){
    			$themes_arr[] = $theme;
    		}
    	}
    }
    return $themes_arr;
}

/*
 * Function to return the selected theme names from a list of theme ids
 */
function _okhubapi_get_theme_names_array_from_ids($ids_arr){
	$names_arr = array();
	$theme_arr = _okhubapi_get_themes_arr();
	foreach($theme_arr as $id => $name){
		$names_arr[$id] = $name;
	}
	return $names_arr;
}

/*
 * Function to return the selected datasources as a string for passing to setParam with sources attribute
 */
function _okhubapi_get_datasources_param(){
	$datasources_param = '';
    if ($selected_datasources = _okhubapi_get_selected_datasources_array()) {
    	$datasources_param = _okhubapi_array_to_url_param($selected_datasources);
    }
    return $datasources_param;
}

/*
 * Function to return the selected themes datasources as a string for passing to setParam with sources attribute
 */
function _okhubapi_get_themes_datasources_param(){
	$datasources_param = '';
	$all_datasources_with_themes = _okhubapi_get_sources_with_themes_options();
    if ($selected_datasources = _okhubapi_get_selected_datasources_array('okhubimport_themes_datasources')) {
    	
    	$datasources_param = _okhubapi_array_to_url_param($selected_datasources);
    }
    return $datasources_param;
}

/*
 * Function to return the selected themes as a string for passing to setParam with themes attribute
 */
function _okhubapi_get_themes_param(){
	$themes_param = '';
    if ($selected_themes = _okhubapi_get_selected_themes_array()) {
    	$themes_param = _okhubapi_array_to_url_param($selected_themes);
    }
    return $themes_param;
}

/*
 * Function to return the selected priority lang code if "Only use priority language" true
 * Returns a string for passing to setParam with lang attribute
 */
function _okhubapi_get_lang_param(){
	$lang = '';
	if(variable_get('okhubimport_only_use_priority_language', '')){
		$lang = variable_get('okhubimport_priority_language', '');
	}
    return $lang;
}

/*
 * Turn an array into a parameter list for URL in call to API
 */
function _okhubapi_array_to_url_param($arr){
	$param_list = '';
    foreach($arr as $value){
    	if($param_list){
    		$param_list .= '|';
    	}
    	$param_list .= str_replace(' ', '+', $value);
    }
    return $param_list;
}

/**
 * Get array of sources for form.
 */
function _okhubapi_get_sources_options(){
	global $language;
    $sources_response = okhubapi_get_all('sources', OKHUB_API_DEFAULT_DATASET, 'full');
    $sources_options = array();
    if(isset($sources_response->results)){
	    foreach($sources_response->results as $source){
	    	$is_semantic = FALSE;
    		if($source->get_value('is_semantic')){
    			$is_semantic = TRUE;
    		}
	    	if($source->get_value(OKHUB_API_FN_SOURCE_CODE) && $source->get_value(OKHUB_API_FN_NAME) && !$is_semantic){
	    		$sources_options[$source->get_value(OKHUB_API_FN_SOURCE_CODE)] = $source->get_value(OKHUB_API_FN_NAME);
	    	}
	    }
    }
 	return $sources_options;
}


/**
 * Get array of sources that have themes for form.
 */
function _okhubapi_get_sources_with_themes_options(){
	/* get list of sources that provide themes ...only has source id... so...*/
    $sources_response = okhubapi_count('themes', OKHUB_API_DEFAULT_DATASET, 'source');
    $source_arr = array();
    if(isset($sources_response->results)){
    	/* get all sources full info - name etc... */
    	$sources_options = _okhubapi_get_sources_options();
	    foreach($sources_response->results as $source){
	    	if(method_exists($source,'get_value')){ /* had to add this line otherwise errored when clearing caches ?? */
		    	if($source_id = $source->get_value('object_name')){
		    		$source_full_name = $sources_options[$source_id];
		    		$source_arr[$source_id] = $source_full_name;
		    	}
	    	}
	    }
    }
 	return $source_arr;
}

/**
 * Get array of all themes (or for only for selected datasources) for form.
 */
function _okhubapi_get_themes_arr($selected_datasources_only = FALSE){
	global $language;
	$params = array();
	if($selected_datasources_only){
		$datasources = _okhubapi_get_themes_datasources_param();
		if($datasources){
			$params['source'] = $datasources;
		}
	}
    $themes_response = okhubapi_search('themes', OKHUB_API_DEFAULT_DATASET, 'full', $params);
    $theme_arr = array();
    if(isset($themes_response->results)){
	    foreach($themes_response->results as $theme){
	    	if($theme->get_value(OKHUB_API_FN_ITEM_ID) && $theme->get_value(OKHUB_API_FN_TITLE)){
	    		$theme_arr[$theme->get_value(OKHUB_API_FN_ITEM_ID)] = $theme;
	    	}
	    }
    }
 	return $theme_arr;
}


/**
 * Get theme options for form
 */
function _okhubapi_get_themes_options($theme_arr){
	$themes_options = array();
	foreach($theme_arr as $theme){
		$default_theme_title = '';
		$lang_title_arr = array();
	    foreach($theme->get_value_object(OKHUB_API_FN_TITLE) as $title_arr){
	    	foreach($title_arr as $lang => $title){
	    		$built_title = $title[0] . ' [' . $lang . ']';
    			if(!in_array($built_title, $lang_title_arr)){
    				$lang_title_arr[] = $built_title;
    			}
    		}
    	}
	   	foreach($lang_title_arr as $title){
    		if($default_theme_title) {
    			$default_theme_title .= ' | ';
    		}
    		$default_theme_title .= $title;
    	}
    	if($default_theme_title){
    		$themes_options[$theme->get_value(OKHUB_API_FN_ITEM_ID)] = $default_theme_title;
    	} 
    }
 	return $themes_options;
}

/*
 * Prepare a list of available languages from the 
 */
function _okhubapi_get_language_options_from_themes($theme_options){
	$language_options = array('all' => 'All');
	foreach($theme_options as $theme_arr){
		foreach($theme_arr->get_value_object(OKHUB_API_FN_TITLE) as $source => $source_theme_arr){
			foreach($source_theme_arr as $lang_key => $value){
				$language_options[$lang_key] = $lang_key;
			}
		}
	}
	return $language_options;
}


/**
 * Get array of all languages for form.
 */
function _okhubapi_get_all_languages_arr(){
    $languages_response = okhubapi_count('documents', OKHUB_API_DEFAULT_DATASET, 'language');
    $language_arr = array();
    if(isset($languages_response->results)){
	    foreach($languages_response->results as $language){
	    	if($language_name = $language->get_value('object_name')){
	    		$language_arr[$language_name] = $language_name;
	    	}
	    }
    }
 	return $language_arr;
}

/**
 * Get array of priorities for requests (datasource and language)
 */
function _okhubapi_get_priorities_arr(){
    $priorities = array();
    $priorities['priority_datasource'] = variable_get('okhubimport_priority_datasource', '');
    $priorities['priority_language'] = variable_get('okhubimport_priority_language', '');
 	return $priorities;
}

